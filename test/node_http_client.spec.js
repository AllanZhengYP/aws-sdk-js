// Generated by CoffeeScript 1.12.3
(function() {
  var AWS, EventEmitter, helpers, httpModule;

  helpers = require('./helpers');
  var ShakyStream = require('./mocks/shaky-stream');
  AWS = helpers.AWS;

  EventEmitter = require('events').EventEmitter;

  httpModule = require('http');

  if (AWS.util.isNode()) {
    describe('AWS.NodeHttpClient', function() {
      var http;
      http = new AWS.NodeHttpClient();
      describe('maxSockets delegation', function() {
        it('delegates maxSockets from agent to globalAgent', function() {
          var agent, https;
          https = require('https');
          agent = http.sslAgent();
          https.globalAgent.maxSockets = 5;
          expect(https.globalAgent.maxSockets).to.equal(agent.maxSockets);
          https.globalAgent.maxSockets += 1;
          return expect(https.globalAgent.maxSockets).to.equal(agent.maxSockets);
        });

        it('overrides globalAgent value if global is set to Infinity', function() {
          var agent, https;
          https = require('https');
          agent = http.sslAgent();
          https.globalAgent.maxSockets = 2e308;
          return expect(agent.maxSockets).to.equal(50);
        });

        it('overrides globalAgent value if global is set to false', function() {
          var agent, https, oldGlobal;
          https = require('https');
          oldGlobal = https.globalAgent;
          https.globalAgent = false;
          agent = http.sslAgent();
          expect(agent.maxSockets).to.equal(50);
          return https.globalAgent = oldGlobal;
        });
      });

      describe('handleRequest', function() {
        it('emits error event', function(done) {
          var req;
          req = new AWS.HttpRequest('http://invalid');
          return http.handleRequest(req, {}, null, function(err) {
            expect(err.code).to.equal('ENOTFOUND');
            return done();
          });
        });

        it('supports timeout in httpOptions', function() {
          var numCalls, req;
          numCalls = 0;
          req = new AWS.HttpRequest('http://1.1.1.1');
          return http.handleRequest(req, {
            timeout: 1
          }, null, function(err) {
            numCalls += 1;
            expect(err.code).to.equal('TimeoutError');
            expect(err.message).to.equal('Connection timed out after 1ms');
            return expect(numCalls).to.equal(1);
          });
        });

        it('supports connectTimeout in httpOptions', function() {
          var numCalls, req;
          numCalls = 0;
          req = new AWS.HttpRequest('http://10.255.255.255');
          return http.handleRequest(req, {
            connectTimeout: 1
          }, null, function(err) {
            numCalls += 1;
            expect(err.code).to.equal('TimeoutError');
            expect(err.message).to.equal('Socket timed out without establishing a connection');
            return expect(numCalls).to.equal(1);
          });
        });

        describe('timeout', function() {
          it('is obeyed even after response headers are recieved', function(done) {
            // a mock server with 'ShakyStream' allows us to simulate a period of socket inactivity
            var server = httpModule.createServer(function(req, res) {
              res.setHeader('Content-Type', 'application/json');
              var ss = new ShakyStream({
                pauseFor: 1000 // simulate 1 second pause while receiving data
              });
              ss.pipe(res);
            }).listen(3334);
            var ddb = new AWS.DynamoDB({
              httpOptions: {
                timeout: 100
              },
              endpoint: 'http://127.0.0.1:3334'
            });
            ddb.scan({
              TableName: 'fake'
            }, function(err, data) {
              server.close();
              expect(err.name).to.equal('TimeoutError');
              done();
            });
          });

          it('does not trigger unnecessarily', function(done) {
            // a mock server with 'ShakyStream' allows us to simulate a period of socket inactivity
            var server = httpModule.createServer(function(req, res) {
              res.setHeader('Content-Type', 'application/json');
              var ss = new ShakyStream({
                pauseFor: 100 // simulate 100 ms pause while receiving data
              });
              ss.pipe(res);
            }).listen(3334);
            var ddb = new AWS.DynamoDB({
              httpOptions: {
                timeout: 1000
              },
              endpoint: 'http://127.0.0.1:3334'
            });
            ddb.scan({
              TableName: 'fake'
            }, function(err, data) {
              server.close();
              expect(err).to.eql(null);
              done();
            });
          });
        });

        describe('connectTimeout', function() {
          var clearTimeoutSpy, mockClientRequest, oldClearTimeout, oldRequest, oldSetTimeout, requestSpy, setTimeoutSpy, timeoutId;
          timeoutId = 'TIMEOUT_ID';
          oldSetTimeout = global.setTimeout;
          oldClearTimeout = global.clearTimeout;
          setTimeoutSpy = null;
          clearTimeoutSpy = null;
          oldRequest = httpModule.request;
          requestSpy = null;
          mockClientRequest = null;
          beforeEach(function() {
            setTimeoutSpy = helpers.spyOn(global, 'setTimeout').andReturn(timeoutId);
            clearTimeoutSpy = helpers.spyOn(global, 'clearTimeout').andCallFake(function() {
              return {};
            });
            mockClientRequest = new EventEmitter();
            mockClientRequest.setTimeout = function() {
              return {};
            };
            mockClientRequest.end = function() {
              return {};
            };
            return requestSpy = helpers.spyOn(httpModule, 'request').andReturn(mockClientRequest);
          });
          afterEach(function() {
            global.setTimeout = oldSetTimeout;
            global.clearTimeout = oldClearTimeout;
            return httpModule.request = oldRequest;
          });
          return it('clears timeouts once the connection has been established', function() {
            var mockSocket, req;
            req = new AWS.HttpRequest('http://10.255.255.255');
            http.handleRequest(req, {
              connectTimeout: 120000
            }, null, function() {
              return {};
            });
            mockSocket = new EventEmitter();
            mockSocket.connecting = true;
            mockClientRequest.emit('socket', mockSocket);
            expect(setTimeoutSpy.calls.length).to.equal(1);
            mockSocket.emit('connect');
            expect(clearTimeoutSpy.calls.length).to.equal(1);
            return expect(clearTimeoutSpy.calls[0]["arguments"][0]).to.equal(timeoutId);
          });
        });
      });
    });
  }

  if (AWS.util.isNode()) {
    var uintArraySliceFn = helpers.uintArraySliceFn;
    //supplemental unit test for Node client integrityChecker.js
    describe('Node client integrityChecker', function() {
      var IntegrityCheckerStream = require('../lib/http/response-validator/integrityChecker');
      var integrityCheckerStream;
      var rawData;
      var data;
      var error;
      beforeEach(function() {
        integrityCheckerStream = new IntegrityCheckerStream('append-md5', 27);
        //rawData is 'test string' with trailing md5 checksum
        rawData = new Uint8Array([116, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103, 111, 141, 181, 153, 222, 152, 111, 171, 122, 33, 98, 91, 121, 22, 88, 156]);
        data = '';
        error = null;
      })
    
      it('should validate response data splitted in different chunks', function(done) {
        if (AWS.HttpClient.streamApiVersion === 1) {
          done();
        }
        var chunk1 = typeof rawData.slice === 'function' ? rawData.slice(0, 6) : uintArraySliceFn.call(rawData, 0, 6);
        var chunk2 = typeof rawData.slice === 'function' ? rawData.slice(6, 27) : uintArraySliceFn.call(rawData, 6, 27);
        integrityCheckerStream.on('readable', function() {
          var chunk = integrityCheckerStream.read();
          if (chunk) 
            data += chunk.toString('utf8')
        })
        integrityCheckerStream.on('error', function(e) {
          error = e;
        });
        integrityCheckerStream.on('end', function() {
          expect(error).to.be['null'];
          expect(data).to.equal('test string');
          done();
        })
        integrityCheckerStream.write(new require('buffer').Buffer(chunk1));
        integrityCheckerStream.write(new require('buffer').Buffer(chunk2));
        integrityCheckerStream.end();
      });
    
      it ('should faild when checksum is incorrect', function(done) {
        if (AWS.HttpClient.streamApiVersion === 1) {
          done();
        }
        rawData[0] =  0;
        var chunk1 = typeof rawData.slice === 'function' ? rawData.slice(0, 6) : uintArraySliceFn.call(rawData, 0, 6);
        var chunk2 = typeof rawData.slice === 'function' ? rawData.slice(6, 27) : uintArraySliceFn.call(rawData, 6, 27);
        integrityCheckerStream.on('readable', function() {
          var chunk = integrityCheckerStream.read();
          if (chunk) 
            data += chunk.toString('utf8')
        })
        integrityCheckerStream.on('error', function(e) {
          error = e;
          expect(error.code).to.equal('ResponseChecksumMismatch');
          done();
        });
        integrityCheckerStream.on('end', function() {
          expect(error).to.not.be['null'];
        })
        integrityCheckerStream.write(new require('buffer').Buffer(chunk1));
        integrityCheckerStream.write(new require('buffer').Buffer(chunk2));
        integrityCheckerStream.end();
      })
    
      it('should validate response when checksum is splitted in different chunks', function(done) {
        if (AWS.HttpClient.streamApiVersion === 1) {
          done();
        }
        var chunk1 = typeof rawData.slice === 'function' ? rawData.slice(0, 20) : uintArraySliceFn.call(rawData, 0, 20);
        var chunk2 = typeof rawData.slice === 'function' ? rawData.slice(20) : uintArraySliceFn.call(rawData, 20);
        integrityCheckerStream.on('readable', function() {
          var chunk = integrityCheckerStream.read();
          if (chunk) 
            data += chunk.toString('utf8')
        })
        integrityCheckerStream.on('error', function(e) {
          error = e;
        });
        integrityCheckerStream.on('end', function() {
          expect(error).to.be['null'];
          expect(data).to.equal('test string');
          done();
        })
        integrityCheckerStream.write(new require('buffer').Buffer(chunk1));
        integrityCheckerStream.write(new require('buffer').Buffer(chunk2));
        integrityCheckerStream.end();
      })
    
      it('should validate response when splitted in 3 chunks and checksum is splitted in different chunks', function(done) {
        if (AWS.HttpClient.streamApiVersion === 1) {
          done();
        }
        var chunk0 = typeof rawData.slice === 'function' ? rawData.slice(0, 11) : uintArraySliceFn.call(rawData, 0, 11);
        var chunk1 = typeof rawData.slice === 'function' ? rawData.slice(11, 20) : uintArraySliceFn.call(rawData, 11, 20);
        var chunk2 = typeof rawData.slice === 'function' ? rawData.slice(20) : uintArraySliceFn.call(rawData, 20);
        integrityCheckerStream.on('readable', function() {
          var chunk = integrityCheckerStream.read();
          if (chunk) 
            data += chunk.toString('utf8')
        })
        integrityCheckerStream.on('error', function(e) {
          error = e;
        });
        integrityCheckerStream.on('end', function() {
          expect(error).to.be['null'];
          expect(data).to.equal('test string');
          done();
        })
        integrityCheckerStream.write(new require('buffer').Buffer(chunk0));
        integrityCheckerStream.write(new require('buffer').Buffer(chunk1));
        integrityCheckerStream.write(new require('buffer').Buffer(chunk2));
        integrityCheckerStream.end();
      })
    })

    describe('validate Trailing Checksum (Node)', function() {
      var app;
      var data;
      var error;
      var service;
      var rawData;
      var responseData;
      var streamsApiVersion = AWS.HttpClient.streamsApiVersion;
      var getport;
      var server;
      getport = function(cb, startport) {
        var port, srv;
        port = startport || 54321;
        srv = require('net').createServer();
        srv.on('error', function() {
          return getport(cb, port + 1);
        });
        return srv.listen(port, function() {
          srv.once('close', function() {
            return cb(port);
          });
          return srv.close();
        });
      }
      server = require('http').createServer(function(req, resp) {
        return app(req, resp);
      });

      beforeEach(function(done) {
        data = '';
        error = null;
        rawData = new Uint8Array([116, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103, 111, 141, 181, 153, 222, 152, 111, 171, 122, 33, 98, 91, 121, 22, 88, 156]);
        responseData = new require('buffer').Buffer(rawData);
        app = function(req, resp) {
          resp.writeHead(200, {
            'x-amz-transfer-encoding': 'append-md5',
            'content-length': 27,
            'x-amz-content-range': 'bytes=0-11/12345'
          });
          resp.write(responseData);
          return resp.end();
        };
        return getport(function(port) {
          server.listen(port);
          service = new helpers.MockService({
            endpoint: 'http://localhost:' + port
          });
          done();
        });
      });

      afterEach(function() {
        AWS.HttpClient.streamsApiVersion = streamsApiVersion;
        return server.close();
      });

      describe('in streaming mode', function () {
        it('should validate md5 trailing checksum and chop off trailing checksum', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.be['null'];
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          return s.on('end', function() {
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            expect(request.response.httpResponse.headers['content-length']).to.equal(11);
            done();
          });
        });

        it('should raise error when hashing algorithm is not supported', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {
              'x-amz-transfer-encoding': 'append-crc32c',
              'content-length': 27,
            });
            resp.write(responseData);
            return resp.end();
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('UnsupportedHashingAlgorithm');
            expect(error.message).to.equal('Cannot validate response header: append-crc32c, expected \'append-md5\'');
            done();
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          s.on('end', function() {
            expect(error).to.not.be['null'];
          });
        });

        it('should raise error when checksum is invalid', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          responseData = new require('buffer').Buffer(rawData);
          app = function(req, resp) {
            resp.writeHead(200, {
              'x-amz-transfer-encoding': 'append-md5',
              'content-length': 27,
            });
            rawData[0] = 0;
            responseData = new require('buffer').Buffer(rawData);
            resp.write(responseData);
            return resp.end();
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('ResponseChecksumMismatch');
            expect(error.message).to.equal('Response fails integrity check.')
            done();
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          s.on('end', function() {
            expect(error).to.not.be['null'];
          });
        });
  
        it('do not support validating trailing checksum', function(done) {
          AWS.HttpClient.streamsApiVersion = 1
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.be['null'];
          });
          s.on('data', function(dat) {
            if(dat.length > 0) {
              data += dat.toString();
            }
          });
          s.on('end', function() {
            expect(error).to.be['null'];
            expect(data).to.equal(responseData.toString());
            expect(request.response.httpResponse.headers['content-length']).to.equal('27');
            done();
          });
        });
      })

      describe('in callback mode', function () {
        it('should validate md5 trailing checksum and chop off trailing checksum', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          var request = service.makeRequest('mockMethod');
          request.send(function(err, data) {
            expect(err).to.be['null'];
            expect(data).to.equal('test string');
            expect(request.response.httpResponse.headers['content-length']).to.equal(11);
            expect(request.response.retryCount).to.equal(0);
            done();
          })
        });

        it('should raise error when hashing algorithm is not supported', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {
              'x-amz-transfer-encoding': 'append-crc32c',
              'content-length': 27,
            });
            resp.write(responseData);
            return resp.end();
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, data) {
            expect(data).to.be['null'];
            expect(err).to.not.be['null'];
            expect(err.code).to.equal('UnsupportedHashingAlgorithm');
            expect(err.message).to.equal('Cannot validate response header: append-crc32c, expected \'append-md5\'');
            expect(request.response.retryCount).to.equal(0);
            done();
          })
        });

        it('should raise error when checksum is invalid', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          responseData = new require('buffer').Buffer(rawData);
          app = function(req, resp) {
            resp.writeHead(200, {
              'x-amz-transfer-encoding': 'append-md5',
              'content-length': 27,
            });
            rawData[0] = 0;
            responseData = new require('buffer').Buffer(rawData);
            resp.write(responseData);
            return resp.end();
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, data) {
            expect(data).to.be['null'];
            expect(err).to.not.be['null'];
            expect(err.code).to.equal('ResponseChecksumMismatch');
            expect(err.message).to.equal('Response fails integrity check.');
            expect(request.response.retryCount).to.equal(3);
            done();
          });
        });

        it('should raise error when response is shorter than checksum', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          responseData = new require('buffer').Buffer(rawData);
          app = function(req, resp) {
            resp.writeHead(200, {
              'x-amz-transfer-encoding': 'append-md5',
              'content-length': 11,
            });
            var chunk1 = typeof rawData.slice === 'function' ? rawData.slice(0, 11) : uintArraySliceFn.call(rawData, 0, 11);
            responseData = new require('buffer').Buffer(chunk1);
            resp.write(responseData);
            return resp.end(); 
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, data) {
            expect(data).to.be['null'];
            expect(err).to.not.be['null'];
            expect(err.code).to.equal('ResponseChecksumMismatch');
            expect(err.message).to.equal('Response fails integrity check.');
            expect(request.response.retryCount).to.equal(3);
            done();
          });
        });

        it('do not support validating trailing checksum', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          var request = service.makeRequest('mockMethod');
          request.send(function(err, data) {
            expect(err).to.be['null'];
            expect(data).to.equal(responseData.toString());
            expect(request.response.httpResponse.headers['content-length']).to.equal('27');
            done();
          });
        });
      })
    })
    
    describe('validate content-length (Node)', function() {
      var streamsApiVersion = AWS.HttpClient.streamsApiVersion;;
      var app;
      var data;
      var error;
      var service = new helpers.MockService;
      var responseData;
      var getport;
      var server
      var getport = function(cb, startport) {
        var port, srv;
        port = startport || 34567;
        srv = require('net').createServer();
        srv.on('error', function() {
          return getport(cb, port + 1);
        });
        return srv.listen(port, function() {
          srv.once('close', function() {
            return cb(port);
          });
          return srv.close();
        });
      }
      var server = require('http').createServer(function(req, resp) {
        return app(req, resp);
      });

      beforeEach(function(done) {
        data = '';
        error = null;
        responseData = new require('buffer').Buffer('test string');
        app = function(req, resp) {
          resp.writeHead(200, {'content-length': 11});
          resp.end(responseData);
        };
        return getport(function(port) {
          server.listen(port);
          service = new helpers.MockService({
            endpoint: 'http://localhost:' + port
          });
          done();
        });
      });

      afterEach(function() {
        AWS.HttpClient.streamsApiVersion = streamsApiVersion;
        return server.close();
      });

      describe('in streaming mode', function () {
        it ('should pass with correct content-length', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.be['null'];
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          return s.on('end', function() {
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            expect(request.response.httpResponse.headers['content-length']).to.equal('11');
            done();
          });
        });

        it ('should pass without content-length header', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.be['null'];
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          return s.on('end', function() {
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            done();
          });
        });

        it ('should raise error when content-lenth header is smaller than response, response truncated', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 10});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('NetworkingError');
            expect(error.message).to.equal('Parse Error');
            done();
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          return s.on('end', function() {
            expect(error).to.not.be['null'];
            expect(data).to.equal('test strin');
          });
        });

        it ('should raise error when content-lenth header is larger than response', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 12});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('StreamContentLengthMismatch');
            expect(error.message).to.equal('Stream content length mismatch. Received 11 of 12 bytes.');
            done();
          });
          s.on('readable', function() {
            var chunk, e;
            try {
              chunk = s.read();
              if (chunk) {
                return data += chunk;
              }
            } catch (error1) {
              e = error1;
              return console.log(e.stack);
            }
          });
          return s.on('end', function() {
            expect(error).to.not.be['null'];
            expect(data).to.equal('test string');
          });
        });

        it ('should pass without content-length header(old stream api)', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          app = function(req, resp) {
            resp.writeHead(200, {});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.be['null'];
          });
          s.on('data', function(dat) {
            if (dat) {
              return data += dat;
            }
          });
          return s.on('end', function() {
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            done();
          });
        });

        it ('should raise error when content-lenth header is smaller than response, response truncated(old stream api)', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 10});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('NetworkingError');
            expect(error.message).to.equal('Parse Error');
            done();
          });
          s.on('data', function(dat) {
            if (dat) {
              return data += dat;
            }
          });
          return s.on('end', function() {
            expect(error).to.not.be['null'];
            expect(data).to.equal('test strin');
          });
        });

        it ('should raise error when content-lenth header is larger than response', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 12});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          var s = request.createReadStream();
          s.on('error', function(e) {
            error = e;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('StreamContentLengthMismatch');
            expect(error.message).to.equal('Stream content length mismatch. Received 11 of 12 bytes.');
            done();
          });
          s.on('data', function(dat) {
            if (dat) {
              return data += dat;
            }
          });
          return s.on('end', function() {
            expect(error).to.not.be['null'];
            expect(data).to.equal('test string');
          });
        });
      });

      describe('in callback mode', function () {
        it('should handle error event and destroy connection', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {
              'x-amz-transfer-encoding': 'append-md5',
              'content-length': 28,
            });
            resp.write(responseData);
            return resp.end();
          };
          var request = service.makeRequest('mockMethod');
          request.send(function(err, data) {
            expect(err).to.not.be['null'];
            expect(data).to.be['null'];
            done();
          })
        })

        it('should handle error event from IncomingMessage and destroy connection', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          var oldRequest = httpModule.request;
          var mockMessage = new (require('stream')).Readable();
          mockMessage._read = function(size) {
            this.push('foo');
          }
          mockMessage._destroy = function(){};
          mockMessage.headers = {'content-length': 11};
          var unpipeSpy = helpers.spyOn(mockMessage, 'unpipe').andCallThrough();
          var destroySpy = helpers.spyOn(mockMessage, 'destroy').andCallThrough();
          var mockClientRequest = function (option, cb) {
            cb.call(this, mockMessage);
            mockMessage.emit('error', new Error('MockError'));
            return {}
          }
          mockClientRequest.setTimeout = function() {
            return {};
          };
          mockClientRequest.on = function() {
            return {};
          };
          mockClientRequest.end = function() {
            return {};
          };
          helpers.spyOn(httpModule, 'request').andCallFake(mockClientRequest).andReturn({})
          var req = new AWS.HttpRequest('http://localhost:'+ service.config.endpoint.split(':')[2]);
          var http = new AWS.NodeHttpClient();
          try {
            http.handleRequest(req, {}, null, function() {return {}});
          } catch (err) {
            expect(err.message).to.equal('MockError');
          }
          expect(unpipeSpy.calls.length).to.equal(1);
          expect(destroySpy.calls.length).to.equal(1);
          httpModule.request = oldRequest;
          done();
        })

        it ('should pass with correct content-length', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err;
            data = dat;
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            expect(request.response.httpResponse.headers['content-length']).to.equal('11');
            expect(request.response.retryCount).to.equal(0);
            done();
          });
        });

        it ('should pass without content-length header', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err;
            data = dat;
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            expect(request.response.retryCount).to.equal(0);
            done();
          });
        });

        it ('should raise error when content-lenth header is smaller than response, response truncated', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 10});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err;
            data = dat;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('NetworkingError');
            expect(error.message).to.equal('Parse Error');
            expect(data).to.be['null'];
            expect(request.response.retryCount).to.equal(3);
            done();
          })
        });

        it ('should raise error when content-lenth header is larger than response', function(done) {
          if (AWS.HttpClient.streamsApiVersion === 1) {
            done();
          }
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 12});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err; data = dat;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('StreamContentLengthMismatch');
            expect(error.message).to.equal('Stream content length mismatch. Received 11 of 12 bytes.');
            expect(data).to.be['null'];
            expect(request.response.retryCount).to.equal(3);
            done();
          })
        });

        it ('should pass with correct content-length(old stream api)', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err; data = dat;
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            expect(request.response.httpResponse.headers['content-length']).to.equal('11');
            done();
          });
        });

        it ('should pass without content-length header(old stream api)', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          app = function(req, resp) {
            resp.writeHead(200, {});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err; data = dat;
            expect(error).to.be['null'];
            expect(data).to.equal('test string');
            done();
          });
        });

        if (AWS.HttpClient.streamsApiVersion === 1) {
          it ('will not raise error when content-lenth header is smaller than response, response truncated(old stream api)', function(done) {
            app = function(req, resp) {
              resp.writeHead(200, {'content-length': 10});
              return resp.end(responseData);
            };
            var request = service.makeRequest('mockMethod')
            request.send(function(err, dat) {
              error = err; data = dat;
              expect(error).to.be['null'];
              expect(data).to.equal('test strin')
              done();
            })
          });
        }        

        it ('should raise error when content-lenth header is larger than response(old stream api)', function(done) {
          AWS.HttpClient.streamsApiVersion = 1;
          app = function(req, resp) {
            resp.writeHead(200, {'content-length': 12});
            return resp.end(responseData);
          };
          var request = service.makeRequest('mockMethod')
          request.send(function(err, dat) {
            error = err; data = dat;
            expect(error).to.not.be['null'];
            expect(error.code).to.equal('StreamContentLengthMismatch');
            expect(error.message).to.equal('Stream content length mismatch. Received 11 of 12 bytes.');
            expect(data).to.be['null'];
            expect(request.response.retryCount).to.equal(3);
            done();
          })
        });
      })
    });
  }

}).call(this);
